条件判断:
	JavaScript把null\undefined\0\NaN和空字符串''视为false,其他值一律视为true
	
	for循环最常用的地方就是利用索引来遍历数组
		for(i=0;i<arr.length;i++)
		{
		x=arr[i];
		alert(x);
		}
	for in 循环	可以把一个对象的所有属性依次循环出来:
	
	var o={
		name;'Jack',
		age:20,
		city:'Beijing'
		};
	for(var key in o){
		alert(key);//'name','age','city'
	}
	要过滤掉对象继承的属性,用hasOwnProperty()来实现:
		o.hasOwnProperty(key);
		
	注意:for in 对Array的循环得到的是string而不是Number
	
	Map是一组键值对的结构,具有极快的查找速度.
	var m = new Map(); // 空Map
	m.set('Adam', 67); // 添加新的key-value
	m.set('Bob', 59);
	m.has('Adam'); // 是否存在key 'Adam': true
	m.get('Adam'); // 67
	m.delete('Adam'); // 删除key 'Adam'
	m.get('Adam'); // undefined
	
	
	两种定义函数的方法:
		var abs=function(x){}
		var function abs(x){}
		
		function abs(x){
					if(typeof x!=='number'){
							throw 'Not a number'
							}
						if(x>0){
							return x;
							}
						else{
							return -x;
							}
						}
		javascript还有一个免费赠送的关键字arguments,它只在函数内部起作用,并且永远指向当前函数的调用者传入的所用函数.
		
		利用argumnets,你可以获得调用者传入的所有参数,也就是说,即使函数不定义任何参数,还是可以拿到参数的值.
		function foo(x) {
		alert(x); // 10
		for (var i=0; i<arguments.length; i++) {
        alert(arguments[i]); // 10, 20, 30
						}
			}
		foo(10, 20, 30);
		
		
		rest参数:
	function foo(a, b, ...rest) {
    console.log('a = ' + a);
    console.log('b = ' + b);
    console.log(rest);
	}
	
	foo(1, 2, 3, 4, 5);
	// 结果:
	// a = 1
	// b = 2
	// Array [ 3, 4, 5 ]
	
	foo(1);
	// 结果:
	// a = 1
	// b = undefined
	// Array []	rest参数只能写在最后,前面用...标识,从运行结果可知,传入的参数先绑定a.b,多余的参数以数组形式交给rest,所以,不再需要arguments我们就能获取全部参数了.
